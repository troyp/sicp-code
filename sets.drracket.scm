#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file is in PLT Scheme editor format.
   Open this file in DrScheme version 370 or later to read it.

   Most likely, it was created by saving a program in DrScheme,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://www.plt-scheme.org
|#
 29 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wxmedia\0"
4 1 8 #"wximage\0"
2 0 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 33 #"(lib \"bullet-snip.ss\" \"browser\")\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 56
(
 #"(lib \"hrule-snip.ss\" \"macro-debugger\" \"syntax-browse"
 #"r\")\0"
) 1 0 18 #"java-comment-box%\0"
1 0 23 #"java-interactions-box%\0"
1 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55
(
 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private"
 #"\")\0"
) 1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 15 #"test-case-box%\0"
2 0 1 6 #"wxloc\0"
00000000000 1 52 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 15
#"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 2 27
#"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drscheme:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drscheme:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 41
#"profj:syntax-colors:scheme:block-comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
35 #"profj:syntax-colors:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 0 139 0 0 0 -1 -1 2 37
#"profj:syntax-colors:scheme:prim-type\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 0 139 0 0 0 -1 -1 2 38
#"profj:syntax-colors:scheme:identifier\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 2 34
#"profj:syntax-colors:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 2 35
#"profj:syntax-colors:scheme:literal\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 2 35
#"profj:syntax-colors:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
33 #"profj:syntax-colors:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 35
#"profj:syntax-colors:scheme:default\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 37
#"profj:syntax-colors:scheme:uncovered\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 35
#"profj:syntax-colors:scheme:covered\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 0 139 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 4 4
#"XML\0"
0 70 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 8 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 8 24
#"drscheme:text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1 1 1 0 0 255 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1 1 1 0 0 255 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 100 0 0 0 0 -1 -1
00000000001 0 00000000000 874 0 26 3 10 #"#lang r5rs"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 20 #";; REPRESENTING SETS"
0 0 4 29 1 #"\n"
0 0 17 3 1 #";"
0 0 4 29 1 #"\n"
0 0 17 3 27 #";; ========================"
0 0 4 29 1 #"\n"
0 0 17 3 27 #";; Sets as unordered lists."
0 0 4 29 1 #"\n"
0 0 17 3 27 #";; ========================"
0 0 4 29 1 #"\n"
0 0 17 3 39 #";(define (element-of-set? x set) ; O(n)"
0 0 4 29 1 #"\n"
0 0 17 3 28 #";  (cond ((null? set) false)"
0 0 4 29 1 #"\n"
0 0 17 3 36 #";        ((equal? x (car set)) true)"
0 0 4 29 1 #"\n"
0 0 17 3 47 #";        (else (element-of-set? x (cdr set)))))"
0 0 4 29 1 #"\n"
0 0 17 3 34 #";(define (adjoin-set set x) ; O(n)"
0 0 4 29 1 #"\n"
0 0 17 3 30 #";  (if (element-of-set? set x)"
0 0 4 29 1 #"\n"
0 0 17 3 10 #";      set"
0 0 4 29 1 #"\n"
0 0 17 3 21 #";      (cons x set)))"
0 0 4 29 1 #"\n"
0 0 17 3 46 #";(define (intersection-set set1 set2) ; O(n^2)"
0 0 4 29 1 #"\n"
0 0 17 3 45 #";  (cond ((or (null? set1) (null? set2)) '())"
0 0 4 29 1 #"\n"
0 0 17 3 60
#";        ((element-of-set? (car set1) set2) (cons (car set1)"
0 0 4 29 1 #"\n"
0 0 17 3 85
(
 #";                                                (intersection-set "
 #"(cdr set1) set2)))"
) 0 0 4 29 1 #"\n"
0 0 17 3 52 #";        (else (intersection-set (cdr set1) set2))))"
0 0 4 29 1 #"\n"
0 0 17 3 31 #";; [ex 2.59] Union-set ; O(n^2)"
0 0 4 29 1 #"\n"
0 0 17 3 30 #";(define (union-set set1 set2)"
0 0 4 29 1 #"\n"
0 0 17 3 28 #";  (cond ((null? set1) set2)"
0 0 4 29 1 #"\n"
0 0 17 3 28 #";        ((null? set2) set1)"
0 0 4 29 1 #"\n"
0 0 17 3 72
(
 #";        ((element-of-set? (car set1) set2) (union-set (cdr set1) s"
 #"et2))"
) 0 0 4 29 1 #"\n"
0 0 17 3 31 #";        (else (cons (car set1)"
0 0 4 29 1 #"\n"
0 0 17 3 52 #";                    (union-set (cdr set1) set2)))))"
0 0 4 29 1 #"\n"
0 0 17 3 1 #";"
0 0 4 29 1 #"\n"
0 0 17 3 44 #";; [ex 2.60] Representation with Duplicates."
0 0 4 29 1 #"\n"
0 0 17 3 46 #";; element-of-set? and union-set are the same."
0 0 4 29 1 #"\n"
0 0 17 3 27 #";(define (adjoin-set set x)"
0 0 4 29 1 #"\n"
0 0 17 3 16 #";  (cons x set))"
0 0 4 29 1 #"\n"
0 0 17 3 26 #";(define (union-set set x)"
0 0 4 29 1 #"\n"
0 0 17 3 16 #";  (append s t))"
0 0 4 29 1 #"\n"
0 0 17 3 114
(
 #";; adjoin-set and union-set are faster, since they combine elements"
 #" to a base set without checking whether they're"
) 0 0 4 29 1 #"\n"
0 0 17 3 119
(
 #";; already there. element-of-set? will be about as fast as before f"
 #"or positive results, but slower for negative results"
) 0 0 4 29 1 #"\n"
0 0 17 3 80
(
 #";; due to increased list size. Intersection-set will also be slower"
 #" as a result."
) 0 0 4 29 1 #"\n"
0 0 17 3 114
(
 #";; This representation may be useful if you are usually checking se"
 #"t membership when you expect a positive result,"
) 0 0 4 29 1 #"\n"
0 0 17 3 65
#";; and are more likely to use union than intersection operations."
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 24 #"; ======================"
0 0 4 29 1 #"\n"
0 0 17 3 24 #"; Sets as ordered lists."
0 0 4 29 1 #"\n"
0 0 17 3 24 #"; ======================"
0 0 4 29 1 #"\n"
0 0 17 3 39 #";(define (element-of-set? set x) ; O(n)"
0 0 4 29 1 #"\n"
0 0 17 3 28 #";  (cond ((null? set) false)"
0 0 4 29 1 #"\n"
0 0 17 3 31 #";        ((= x (car set)) true)"
0 0 4 29 1 #"\n"
0 0 17 3 32 #";        ((< x (car set)) false)"
0 0 4 29 1 #"\n"
0 0 17 3 47 #";        (else (element-of-set? x (cdr set)))))"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"intersection-set"
0 0 4 3 1 #" "
0 0 14 3 4 #"set1"
0 0 4 3 1 #" "
0 0 14 3 4 #"set2"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 17 3 5 #";O(n)"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"or"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"null?"
0 0 4 3 1 #" "
0 0 14 3 4 #"set1"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"null?"
0 0 4 3 1 #" "
0 0 14 3 4 #"set2"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 20 3 1 #"'"
0 0 22 3 2 #"()"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 2 #"x1"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 4 3 1 #" "
0 0 14 3 4 #"set1"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 22 3 1 #"("
0 0 14 3 2 #"x2"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 4 3 1 #" "
0 0 14 3 4 #"set2"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 1 #"="
0 0 4 3 1 #" "
0 0 14 3 2 #"x1"
0 0 4 3 1 #" "
0 0 14 3 2 #"x2"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 4 3 1 #" "
0 0 14 3 2 #"x1"
0 0 4 29 1 #"\n"
0 0 4 3 31 #"                               "
0 0 22 3 1 #"("
0 0 14 3 16 #"intersection-set"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 4 3 1 #" "
0 0 14 3 4 #"set1"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 49 #"                                                 "
0 0 22 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 4 3 1 #" "
0 0 14 3 4 #"set2"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 14 #"              "
0 0 22 3 2 #"(("
0 0 14 3 1 #"<"
0 0 4 3 1 #" "
0 0 14 3 2 #"x1"
0 0 4 3 1 #" "
0 0 14 3 2 #"x2"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"intersection-set"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 4 3 1 #" "
0 0 14 3 4 #"set1"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 4 #"set2"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 14 #"              "
0 0 22 3 2 #"(("
0 0 14 3 1 #">"
0 0 4 3 1 #" "
0 0 14 3 2 #"x1"
0 0 4 3 1 #" "
0 0 14 3 2 #"x2"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"intersection-set"
0 0 4 3 1 #" "
0 0 14 3 4 #"set1"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 4 3 1 #" "
0 0 14 3 4 #"set2"
0 0 22 3 7 #")))))))"
0 0 4 29 1 #"\n"
0 0 17 3 30 #";; [ex 2.61] adjoin-set ; O(n)"
0 0 4 29 1 #"\n"
0 0 17 3 27 #";(define (adjoin-set set x)"
0 0 4 29 1 #"\n"
0 0 17 3 31 #";  (cond ((null? set) (list x))"
0 0 4 29 1 #"\n"
0 0 17 3 30 #";        ((= x (car set)) set)"
0 0 4 29 1 #"\n"
0 0 17 3 39 #";        ((< x (car set)) (cons x set))"
0 0 4 29 1 #"\n"
0 0 17 3 53 #";        ((> x (car set)) (adjoin-set x (cdr set)))))"
0 0 4 29 1 #"\n"
0 0 17 3 28 #"; [ex 2.62] union-set ; O(n)"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"union-set"
0 0 4 3 1 #" "
0 0 14 3 4 #"set1"
0 0 4 3 1 #" "
0 0 14 3 4 #"set2"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 5 #"null?"
0 0 4 3 1 #" "
0 0 14 3 4 #"set1"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 4 #"set2"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 2 #"(("
0 0 14 3 5 #"null?"
0 0 4 3 1 #" "
0 0 14 3 4 #"set2"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 4 #"set1"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 4 #"else"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 2 #"x1"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 4 3 1 #" "
0 0 14 3 4 #"set1"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 2 #"x2"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 4 3 1 #" "
0 0 14 3 4 #"set2"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 16 #"                "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 1 #"="
0 0 4 3 1 #" "
0 0 14 3 2 #"x1"
0 0 4 3 1 #" "
0 0 14 3 2 #"x2"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 4 3 1 #" "
0 0 14 3 2 #"x1"
0 0 4 29 1 #"\n"
0 0 4 3 39 #"                                       "
0 0 22 3 1 #"("
0 0 14 3 9 #"union-set"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 4 3 1 #" "
0 0 14 3 4 #"set1"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 4 3 1 #" "
0 0 14 3 4 #"set2"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 22 #"                      "
0 0 22 3 2 #"(("
0 0 14 3 1 #"<"
0 0 4 3 1 #" "
0 0 14 3 2 #"x1"
0 0 4 3 1 #" "
0 0 14 3 2 #"x2"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 4 3 1 #" "
0 0 14 3 2 #"x1"
0 0 4 29 1 #"\n"
0 0 4 3 39 #"                                       "
0 0 22 3 1 #"("
0 0 14 3 9 #"union-set"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 4 3 1 #" "
0 0 14 3 4 #"set1"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 4 #"set2"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 22 #"                      "
0 0 22 3 2 #"(("
0 0 14 3 1 #">"
0 0 4 3 1 #" "
0 0 14 3 2 #"x1"
0 0 4 3 1 #" "
0 0 14 3 2 #"x2"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 4 3 1 #" "
0 0 14 3 2 #"x2"
0 0 4 29 1 #"\n"
0 0 4 3 39 #"                                       "
0 0 22 3 1 #"("
0 0 14 3 9 #"union-set"
0 0 4 3 1 #" "
0 0 14 3 4 #"set1"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 4 3 1 #" "
0 0 14 3 4 #"set2"
0 0 22 3 9 #")))))))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 23 #"; ====================="
0 0 4 29 1 #"\n"
0 0 17 3 23 #"; Sets as binary trees."
0 0 4 29 1 #"\n"
0 0 17 3 23 #"; ====================="
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"entry"
0 0 4 3 1 #" "
0 0 14 3 4 #"tree"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 4 3 1 #" "
0 0 14 3 4 #"tree"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"left-branch"
0 0 4 3 1 #" "
0 0 14 3 4 #"tree"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cadr"
0 0 4 3 1 #" "
0 0 14 3 4 #"tree"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"right-branch"
0 0 4 3 1 #" "
0 0 14 3 4 #"tree"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"caddr"
0 0 4 3 1 #" "
0 0 14 3 4 #"tree"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"make-tree"
0 0 4 3 1 #" "
0 0 14 3 5 #"entry"
0 0 4 3 1 #" "
0 0 14 3 4 #"left"
0 0 4 3 1 #" "
0 0 14 3 5 #"right"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 14 3 5 #"entry"
0 0 4 3 1 #" "
0 0 14 3 4 #"left"
0 0 4 3 1 #" "
0 0 14 3 5 #"right"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"element-of-set?"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 14 3 3 #"set"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 17 3 10 #"; O(log n)"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 5 #"null?"
0 0 4 3 1 #" "
0 0 14 3 3 #"set"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 2 #"#f"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 2 #"(("
0 0 14 3 1 #"="
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"entry"
0 0 4 3 1 #" "
0 0 14 3 3 #"set"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 20 3 2 #"#t"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 2 #"(("
0 0 14 3 1 #"<"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"entry"
0 0 4 3 1 #" "
0 0 14 3 3 #"set"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"element-of-set?"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"left-branch"
0 0 4 3 1 #" "
0 0 14 3 3 #"set"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 2 #"(("
0 0 14 3 1 #">"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"entry"
0 0 4 3 1 #" "
0 0 14 3 3 #"set"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"element-of-set?"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"right-branch"
0 0 4 3 1 #" "
0 0 14 3 3 #"set"
0 0 22 3 5 #")))))"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"adjoin-set"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 14 3 3 #"set"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 17 3 10 #"; O(log n)"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 5 #"null?"
0 0 4 3 1 #" "
0 0 14 3 3 #"set"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"make-tree"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 2 #"()"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 4 #"()))"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 2 #"(("
0 0 14 3 1 #"="
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"entry"
0 0 4 3 1 #" "
0 0 14 3 3 #"set"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 14 3 3 #"set"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 2 #"(("
0 0 14 3 1 #"<"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"entry"
0 0 4 3 1 #" "
0 0 14 3 3 #"set"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"make-tree"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"entry"
0 0 4 3 1 #" "
0 0 14 3 3 #"set"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 38 #"                                      "
0 0 22 3 1 #"("
0 0 14 3 10 #"adjoin-set"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"left-branch"
0 0 4 3 1 #" "
0 0 14 3 3 #"set"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 38 #"                                      "
0 0 22 3 1 #"("
0 0 14 3 12 #"right-branch"
0 0 4 3 1 #" "
0 0 14 3 3 #"set"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 2 #"(("
0 0 14 3 1 #">"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"entry"
0 0 4 3 1 #" "
0 0 14 3 3 #"set"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"make-tree"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"entry"
0 0 4 3 1 #" "
0 0 14 3 3 #"set"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 38 #"                                      "
0 0 22 3 1 #"("
0 0 14 3 11 #"left-branch"
0 0 4 3 1 #" "
0 0 14 3 3 #"set"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 38 #"                                      "
0 0 22 3 1 #"("
0 0 14 3 10 #"adjoin-set"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"right-branch"
0 0 4 3 1 #" "
0 0 14 3 3 #"set"
0 0 22 3 6 #"))))))"
0 0 4 29 1 #"\n"
0 0 17 3 88
(
 #"; The logarithmic growth of these procs rests on the fact that a tr"
 #"ee will be \"balanced\""
) 0 0 4 29 1 #"\n"
0 0 17 3 68
#"; on average, ie. the left and right branches will be the same size."
0 0 4 29 1 #"\n"
0 0 17 3 87
(
 #"; However, this is not a guarantee, and it is possible for very sim"
 #"ple circumstances to"
) 0 0 4 29 1 #"\n"
0 0 17 3 89
(
 #"; result in highly unbalanced trees. One solution is to implement "
 #"\"self-balancing trees\"."
) 0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 46 #"; procs for converting between lists and trees"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"tree->list-1"
0 0 4 3 1 #" "
0 0 14 3 4 #"tree"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"null?"
0 0 4 3 1 #" "
0 0 14 3 4 #"tree"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 20 3 1 #"'"
0 0 22 3 2 #"()"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 6 #"append"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"tree->list-1"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"left-branch"
0 0 4 3 1 #" "
0 0 14 3 4 #"tree"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 14 #"              "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"entry"
0 0 4 3 1 #" "
0 0 14 3 4 #"tree"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 12 #"tree->list-1"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"right-branch"
0 0 4 3 1 #" "
0 0 14 3 4 #"tree"
0 0 22 3 6 #"))))))"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"tree->list-2"
0 0 4 3 1 #" "
0 0 14 3 4 #"tree"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"copy-to-list"
0 0 4 3 1 #" "
0 0 14 3 4 #"tree"
0 0 4 3 1 #" "
0 0 14 3 11 #"result-list"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"null?"
0 0 4 3 1 #" "
0 0 14 3 4 #"tree"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 14 3 11 #"result-list"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 12 #"copy-to-list"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"left-branch"
0 0 4 3 1 #" "
0 0 14 3 4 #"tree"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 22 #"                      "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"entry"
0 0 4 3 1 #" "
0 0 14 3 4 #"tree"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 28 #"                            "
0 0 22 3 1 #"("
0 0 14 3 12 #"copy-to-list"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"right-branch"
0 0 4 3 1 #" "
0 0 14 3 4 #"tree"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 42 #"                                          "
0 0 14 3 11 #"result-list"
0 0 22 3 5 #")))))"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 12 #"copy-to-list"
0 0 4 3 1 #" "
0 0 14 3 4 #"tree"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 4 #"()))"
0 0 4 29 1 #"\n"
0 0 17 3 43 #"; [ex 2.63 a] Compare the procedures above."
0 0 4 29 1 #"\n"
0 0 17 3 14 #";(define tree1"
0 0 4 29 1 #"\n"
0 0 17 3 15 #";  (make-tree 7"
0 0 4 29 1 #"\n"
0 0 17 3 49 #";             (make-tree 3 '(1 () ()) '(5 () ()))"
0 0 4 29 1 #"\n"
0 0 17 3 45 #";             (make-tree 9 '() '(11 () ()))))"
0 0 4 29 1 #"\n"
0 0 17 3 14 #";(define tree2"
0 0 4 29 1 #"\n"
0 0 17 3 15 #";  (make-tree 3"
0 0 4 29 1 #"\n"
0 0 17 3 35 #";             (make-tree 1 '() '())"
0 0 4 29 1 #"\n"
0 0 17 3 26 #";             (make-tree 7"
0 0 4 29 1 #"\n"
0 0 17 3 35 #";                        '(1 () ())"
0 0 4 29 1 #"\n"
0 0 17 3 57 #";                        (make-tree 9 '() '(11 () ())))))"
0 0 4 29 1 #"\n"
0 0 17 3 14 #";(define tree3"
0 0 4 29 1 #"\n"
0 0 17 3 15 #";  (make-tree 5"
0 0 4 29 1 #"\n"
0 0 17 3 42 #";             (make-tree 3 '(1 () ()) '())"
0 0 4 29 1 #"\n"
0 0 17 3 52 #";             (make-tree 9 '(7 () ()) '(11 () ()))))"
0 0 4 29 1 #"\n"
0 0 17 3 53 #"; The 2 procs give identical results for these trees."
0 0 4 29 1 #"\n"
0 0 17 3 43 #"; They appear to produce identical results."
0 0 4 29 1 #"\n"
0 0 17 3 64
(
 #"; [ex 2.63 b] Compare the order of growth in the number of st"
 #"eps"
) 0 0 4 29 1 #"\n"
0 0 17 3 50 #";             required to convert a balanced list."
0 0 4 29 1 #"\n"
0 0 17 3 35 #";  Both appear to have O(n) growth."
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 77
(
 #"; list->tree - proc for converting an ordered list to a balanced bi"
 #"nary tree."
) 0 0 4 29 1 #"\n"
0 0 17 3 88
(
 #"; partial-tree is a helper proc which takes an ordered list and a n"
 #"umber n (<= list len)"
) 0 0 4 29 1 #"\n"
0 0 17 3 74
(
 #"; and returns (as a pair) a balanced tree of the first n elements, "
 #"and the"
) 0 0 4 29 1 #"\n"
0 0 17 3 32 #"; remainder of the ordered list."
0 0 4 29 1 #"\n"
0 00000000000
