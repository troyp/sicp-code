#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file is in PLT Scheme editor format.
   Open this file in DrScheme version 370 or later to read it.

   Most likely, it was created by saving a program in DrScheme,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://www.plt-scheme.org
|#
 29 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wxmedia\0"
4 1 8 #"wximage\0"
2 0 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 33 #"(lib \"bullet-snip.ss\" \"browser\")\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 56
(
 #"(lib \"hrule-snip.ss\" \"macro-debugger\" \"syntax-browse"
 #"r\")\0"
) 1 0 18 #"java-comment-box%\0"
1 0 23 #"java-interactions-box%\0"
1 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55
(
 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private"
 #"\")\0"
) 1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 15 #"test-case-box%\0"
2 0 1 6 #"wxloc\0"
00000000000 1 53 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 15
#"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 2 27
#"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drscheme:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drscheme:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 41
#"profj:syntax-colors:scheme:block-comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
35 #"profj:syntax-colors:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 0 139 0 0 0 -1 -1 2 37
#"profj:syntax-colors:scheme:prim-type\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 0 139 0 0 0 -1 -1 2 38
#"profj:syntax-colors:scheme:identifier\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 2 34
#"profj:syntax-colors:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 2 35
#"profj:syntax-colors:scheme:literal\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 2 35
#"profj:syntax-colors:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
33 #"profj:syntax-colors:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 35
#"profj:syntax-colors:scheme:default\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 37
#"profj:syntax-colors:scheme:uncovered\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 35
#"profj:syntax-colors:scheme:covered\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 0 139 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 4 4
#"XML\0"
0 70 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 8 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 8 24
#"drscheme:text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1 1 1 0 0 255 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1 1 1 0 0 255 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 100 0 0 0 0 -1 -1 0 1
#"\0"
0 75 12 #"Courier New\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1
00000000001 0 00000000000 3424 0 26 3 12 #"#lang scheme"
0 0 4 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"error"
0 0 19 3 1 #" "
0 0 14 3 1 #"s"
0 0 19 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"display"
0 0 19 3 8 #" \"error:"
0 0 19 3 2 #" \""
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"display"
0 0 19 3 1 #" "
0 0 14 3 1 #"s"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"display"
0 0 19 3 4 #" \" \""
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"display"
0 0 19 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"square"
0 0 19 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 19 3 1 #" "
0 0 14 3 1 #"x"
0 0 19 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 17 3 41 #";; **************************************"
0 0 19 29 1 #"\n"
0 0 17 3 41 #";; *                                    *"
0 0 19 29 1 #"\n"
0 0 17 3 41 #";; *  MULTIPLE REPRESENTATIONS OF DATA. *"
0 0 19 29 1 #"\n"
0 0 17 3 41 #";; *                                    *"
0 0 19 29 1 #"\n"
0 0 17 3 41 #";; **************************************"
0 0 19 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 19 29 1 #"\n"
0 0 17 3 40 #";;   ==================================="
0 0 19 29 1 #"\n"
0 0 17 3 40 #";;   Representations of Complex Numbers."
0 0 19 29 1 #"\n"
0 0 17 3 40 #";;   ==================================="
0 0 19 29 1 #"\n"
0 0 17 3 66
#";; We want four selectors: real-part, imag-part, magnitude & angle"
0 0 19 29 1 #"\n"
0 0 17 3 64
#";; and two constructors: make-from-real-imag & make-from-mag-ang"
0 0 19 29 1 #"\n"
0 0 17 3 67
#";; which satisfy the following conditions for any complex number z:"
0 0 19 29 1 #"\n"
0 0 17 3 65
#";; (1) (make-from-real-imag (real-part z) (imag-part z)) equals z"
0 0 19 29 1 #"\n"
0 0 17 3 59
#";; (2) (make-from-mag-ang (magnitude z) (angle z)) equals z"
0 0 19 29 1 #"\n"
0 0 17 3 62
#";; Addition and multiplication are implemented using whichever"
0 0 19 29 1 #"\n"
0 0 17 3 56 #";; representation is most convenient for that operation."
0 0 19 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"add-complex"
0 0 19 3 1 #" "
0 0 14 3 2 #"z1"
0 0 19 3 1 #" "
0 0 14 3 2 #"z2"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 23 #"gen-make-from-real-imag"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"real-part"
0 0 19 3 1 #" "
0 0 14 3 2 #"z1"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"real-part"
0 0 19 3 1 #" "
0 0 14 3 2 #"z2"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 23 #"                       "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"imag-part"
0 0 19 3 1 #" "
0 0 14 3 2 #"z1"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"imag-part"
0 0 19 3 1 #" "
0 0 14 3 2 #"z2"
0 0 22 3 4 #"))))"
0 0 19 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"sub-complex"
0 0 19 3 1 #" "
0 0 14 3 2 #"z1"
0 0 19 3 1 #" "
0 0 14 3 2 #"z2"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 23 #"gen-make-from-real-imag"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"real-part"
0 0 19 3 1 #" "
0 0 14 3 2 #"z1"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"real-part"
0 0 19 3 1 #" "
0 0 14 3 2 #"z2"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 23 #"                       "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"imag-part"
0 0 19 3 1 #" "
0 0 14 3 2 #"z1"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"imag-part"
0 0 19 3 1 #" "
0 0 14 3 2 #"z2"
0 0 22 3 4 #"))))"
0 0 19 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"mul-complex"
0 0 19 3 1 #" "
0 0 14 3 2 #"z1"
0 0 19 3 1 #" "
0 0 14 3 2 #"z2"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 21 #"gen-make-from-mag-ang"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"magnitude"
0 0 19 3 1 #" "
0 0 14 3 2 #"z1"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"magnitude"
0 0 19 3 1 #" "
0 0 14 3 2 #"z2"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 21 #"                     "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"angle"
0 0 19 3 1 #" "
0 0 14 3 2 #"z1"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"angle"
0 0 19 3 1 #" "
0 0 14 3 2 #"z2"
0 0 22 3 4 #"))))"
0 0 19 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"div-complex"
0 0 19 3 1 #" "
0 0 14 3 2 #"z1"
0 0 19 3 1 #" "
0 0 14 3 2 #"z2"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 23 #"gen-make-from-real-imag"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"/"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"magnitude"
0 0 19 3 1 #" "
0 0 14 3 2 #"z1"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"magnitude"
0 0 19 3 1 #" "
0 0 14 3 2 #"z2"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 23 #"                       "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"angle"
0 0 19 3 1 #" "
0 0 14 3 2 #"z1"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"angle"
0 0 19 3 1 #" "
0 0 14 3 2 #"z2"
0 0 22 3 4 #"))))"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 17 3 14 #";;  =========="
0 0 19 29 1 #"\n"
0 0 17 3 14 #";;  TYPE TAGS."
0 0 19 29 1 #"\n"
0 0 17 3 14 #";;  =========="
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 17 3 66
#";; There are two obvious choices for representing complex numbers:"
0 0 19 29 1 #"\n"
0 0 17 3 64
#";; using a cons pair to store two real numbers specifying either"
0 0 19 29 1 #"\n"
0 0 17 3 37 #";; the rectangulsr or the polar form."
0 0 19 29 1 #"\n"
0 0 17 3 21 #";; We can carry the \""
0 0 17 3 9 #"principle"
0 0 17 3 1 #" "
0 0 17 3 2 #"of"
0 0 17 3 1 #" "
0 0 17 3 5 #"least"
0 0 17 3 1 #" "
0 0 17 3 29 #"commitment\" even further, and"
0 0 19 29 1 #"\n"
0 0 17 3 55 #";; maintain both possibilities for representation, by \""
0 0 17 3 4 #"type"
0 0 17 3 1 #" "
0 0 17 3 8 #"tagging\""
0 0 19 29 1 #"\n"
0 0 17 3 44 #";; the data to indicate which form it is in."
0 0 19 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"attach-tag"
0 0 19 3 1 #" "
0 0 14 3 8 #"type-tag"
0 0 19 3 1 #" "
0 0 14 3 8 #"contents"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 19 3 1 #" "
0 0 14 3 8 #"type-tag"
0 0 19 3 1 #" "
0 0 14 3 8 #"contents"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"type-tag"
0 0 19 3 1 #" "
0 0 14 3 5 #"datum"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"pair?"
0 0 19 3 1 #" "
0 0 14 3 5 #"datum"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 19 3 1 #" "
0 0 14 3 5 #"datum"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 5 #"error"
0 0 19 3 2 #" \""
0 0 19 3 3 #"Bad"
0 0 19 3 1 #" "
0 0 19 3 6 #"tagged"
0 0 19 3 1 #" "
0 0 19 3 5 #"datum"
0 0 19 3 1 #" "
0 0 19 3 2 #"--"
0 0 19 3 9 #" TYPE-TAG"
0 0 19 3 2 #"\" "
0 0 14 3 5 #"datum"
0 0 22 3 3 #")))"
0 0 19 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"contents"
0 0 19 3 1 #" "
0 0 14 3 5 #"datum"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"pair?"
0 0 19 3 1 #" "
0 0 14 3 5 #"datum"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 19 3 1 #" "
0 0 14 3 5 #"datum"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 5 #"error"
0 0 19 3 2 #" \""
0 0 19 3 3 #"Bad"
0 0 19 3 1 #" "
0 0 19 3 6 #"tagged"
0 0 19 3 1 #" "
0 0 19 3 5 #"datum"
0 0 19 3 1 #" "
0 0 19 3 2 #"--"
0 0 19 3 9 #" CONTENTS"
0 0 19 3 2 #"\" "
0 0 14 3 5 #"datum"
0 0 22 3 3 #")))"
0 0 19 29 1 #"\n"
0 0 17 3 67
#";; Using type-tags, we can define predicates which test for a given"
0 0 19 29 1 #"\n"
0 0 17 3 23 #";; representation type."
0 0 19 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"rectangular?"
0 0 19 3 1 #" "
0 0 14 3 1 #"z"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 3 #"eq?"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"type-tag"
0 0 19 3 1 #" "
0 0 14 3 1 #"z"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 11 #"rectangular"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"polar?"
0 0 19 3 1 #" "
0 0 14 3 1 #"z"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 3 #"eq?"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"type-tag"
0 0 19 3 1 #" "
0 0 14 3 1 #"z"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"polar"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 17 3 23 #";;  ==================="
0 0 19 29 1 #"\n"
0 0 17 3 23 #";;  GENERIC PROCEDURES."
0 0 19 29 1 #"\n"
0 0 17 3 23 #";;  ==================="
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 17 3 71
(
 #";; We can now define generic constructors and selectors which use t"
 #"hese"
) 0 0 19 29 1 #"\n"
0 0 17 3 70
(
 #";; predicates to test the type of their arguments and then dispatch"
 #" to"
) 0 0 19 29 1 #"\n"
0 0 17 3 54 #";; the appropriate representation-specific procedures."
0 0 19 29 1 #"\n"
0 0 17 3 35 #";; -----rectangular procedures-----"
0 0 19 29 1 #"\n"
0 0 17 3 17 #";;    - selectors"
0 0 19 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 21 #"real-part-rectangular"
0 0 19 3 1 #" "
0 0 14 3 1 #"z"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 19 3 1 #" "
0 0 14 3 1 #"z"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 21 #"imag-part-rectangular"
0 0 19 3 1 #" "
0 0 14 3 1 #"z"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 19 3 1 #" "
0 0 14 3 1 #"z"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 21 #"magnitude-rectangular"
0 0 19 3 1 #" "
0 0 14 3 1 #"z"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 4 #"sqrt"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"square"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 21 #"real-part-rectangular"
0 0 19 3 1 #" "
0 0 14 3 1 #"z"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 11 #"           "
0 0 22 3 1 #"("
0 0 14 3 6 #"square"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 21 #"imag-part-rectangular"
0 0 19 3 1 #" "
0 0 14 3 1 #"z"
0 0 22 3 5 #")))))"
0 0 19 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 17 #"angle-rectangular"
0 0 19 3 1 #" "
0 0 14 3 1 #"z"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 4 #"atan"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 21 #"imag-part-rectangular"
0 0 19 3 1 #" "
0 0 14 3 1 #"z"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 17 3 34 #"; atan can optionally take 2 args:"
0 0 19 29 1 #"\n"
0 0 19 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 21 #"real-part-rectangular"
0 0 19 3 1 #" "
0 0 14 3 1 #"z"
0 0 22 3 3 #")))"
0 0 19 3 2 #"  "
0 0 17 3 30 #"; (atan y x) == (atan (/ y x))"
0 0 19 29 1 #"\n"
0 0 17 3 20 #";;    - constructors"
0 0 19 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 31 #"make-from-real-imag-rectangular"
0 0 19 3 1 #" "
0 0 14 3 1 #"x"
0 0 19 3 1 #" "
0 0 14 3 1 #"y"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 10 #"attach-tag"
0 0 19 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 11 #"rectangular"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 19 3 1 #" "
0 0 14 3 1 #"x"
0 0 19 3 1 #" "
0 0 14 3 1 #"y"
0 0 22 3 3 #")))"
0 0 19 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 29 #"make-from-mag-ang-rectangular"
0 0 19 3 1 #" "
0 0 14 3 1 #"r"
0 0 19 3 1 #" "
0 0 14 3 1 #"a"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 10 #"attach-tag"
0 0 19 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 11 #"rectangular"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 19 3 1 #" "
0 0 14 3 1 #"r"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"cos"
0 0 19 3 1 #" "
0 0 14 3 1 #"a"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 33 #"                                 "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 19 3 1 #" "
0 0 14 3 1 #"r"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"sin"
0 0 19 3 1 #" "
0 0 14 3 1 #"a"
0 0 22 3 5 #")))))"
0 0 19 29 1 #"\n"
0 0 17 3 29 #";; -----polar procedures-----"
0 0 19 29 1 #"\n"
0 0 17 3 17 #";;    - selectors"
0 0 19 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"real-part-polar"
0 0 19 3 1 #" "
0 0 14 3 1 #"z"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"magnitude-polar"
0 0 19 3 1 #" "
0 0 14 3 1 #"z"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 5 #"     "
0 0 22 3 1 #"("
0 0 14 3 3 #"cos"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"angle-polar"
0 0 19 3 1 #" "
0 0 14 3 1 #"z"
0 0 22 3 4 #"))))"
0 0 19 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"imag-part-polar"
0 0 19 3 1 #" "
0 0 14 3 1 #"z"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"magnitude-polar"
0 0 19 3 1 #" "
0 0 14 3 1 #"z"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 5 #"     "
0 0 22 3 1 #"("
0 0 14 3 3 #"sin"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"angle-polar"
0 0 19 3 1 #" "
0 0 14 3 1 #"z"
0 0 22 3 4 #"))))"
0 0 19 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"magnitude-polar"
0 0 19 3 1 #" "
0 0 14 3 1 #"z"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 19 3 1 #" "
0 0 14 3 1 #"z"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"angle-polar"
0 0 19 3 1 #" "
0 0 14 3 1 #"z"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 19 3 1 #" "
0 0 14 3 1 #"z"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 17 3 20 #";;    - constructors"
0 0 19 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 25 #"make-from-real-imag-polar"
0 0 19 3 1 #" "
0 0 14 3 1 #"x"
0 0 19 3 1 #" "
0 0 14 3 1 #"y"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 10 #"attach-tag"
0 0 19 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"polar"
0 0 19 29 1 #"\n"
0 0 19 3 14 #"              "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"sqrt"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"square"
0 0 19 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"square"
0 0 19 3 1 #" "
0 0 14 3 1 #"y"
0 0 22 3 3 #")))"
0 0 19 29 1 #"\n"
0 0 19 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 4 #"atan"
0 0 19 3 1 #" "
0 0 14 3 1 #"y"
0 0 19 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 4 #"))))"
0 0 19 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 23 #"make-from-mag-ang-polar"
0 0 19 3 1 #" "
0 0 14 3 1 #"r"
0 0 19 3 1 #" "
0 0 14 3 1 #"a"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 10 #"attach-tag"
0 0 19 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"polar"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 19 3 1 #" "
0 0 14 3 1 #"r"
0 0 19 3 1 #" "
0 0 14 3 1 #"a"
0 0 22 3 3 #")))"
0 0 19 29 1 #"\n"
0 0 17 3 31 #";; -----generic procedures-----"
0 0 19 29 1 #"\n"
0 0 17 3 63
#";; We can choose either version of the constructors: no testing"
0 0 19 29 1 #"\n"
0 0 17 3 67
#";; and dispatch is required. We choose the mose convenient versions"
0 0 19 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 23 #"gen-make-from-real-imag"
0 0 19 3 1 #" "
0 0 14 3 1 #"x"
0 0 19 3 1 #" "
0 0 14 3 1 #"y"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 31 #"make-from-real-imag-rectangular"
0 0 19 3 1 #" "
0 0 14 3 1 #"x"
0 0 19 3 1 #" "
0 0 14 3 1 #"y"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 21 #"gen-make-from-mag-ang"
0 0 19 3 1 #" "
0 0 14 3 1 #"r"
0 0 19 3 1 #" "
0 0 14 3 1 #"a"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 23 #"make-from-mag-ang-polar"
0 0 19 3 1 #" "
0 0 14 3 1 #"r"
0 0 19 3 1 #" "
0 0 14 3 1 #"a"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 17 3 41 #";; generic selectors use dynamic dispatch"
0 0 19 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"gen-real-part"
0 0 19 3 1 #" "
0 0 14 3 1 #"z"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 19 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 12 #"rectangular?"
0 0 19 3 1 #" "
0 0 14 3 1 #"z"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 21 #"real-part-rectangular"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"contents"
0 0 19 3 1 #" "
0 0 14 3 1 #"z"
0 0 22 3 3 #")))"
0 0 19 29 1 #"\n"
0 0 19 3 8 #"        "
0 0 22 3 2 #"(("
0 0 14 3 6 #"polar?"
0 0 19 3 1 #" "
0 0 14 3 1 #"z"
0 0 22 3 1 #")"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 15 #"real-part-polar"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"contents"
0 0 19 3 1 #" "
0 0 14 3 1 #"z"
0 0 22 3 3 #")))"
0 0 19 29 1 #"\n"
0 0 19 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 4 #"else"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"error"
0 0 19 3 2 #" \""
0 0 19 3 7 #"Unknown"
0 0 19 3 1 #" "
0 0 19 3 4 #"type"
0 0 19 3 1 #" "
0 0 19 3 2 #"--"
0 0 19 3 10 #" REAL-PART"
0 0 19 3 2 #"\" "
0 0 14 3 1 #"z"
0 0 22 3 4 #"))))"
0 0 19 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"gen-imag-part"
0 0 19 3 1 #" "
0 0 14 3 1 #"z"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 19 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 12 #"rectangular?"
0 0 19 3 1 #" "
0 0 14 3 1 #"z"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 21 #"imag-part-rectangular"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"contents"
0 0 19 3 1 #" "
0 0 14 3 1 #"z"
0 0 22 3 3 #")))"
0 0 19 29 1 #"\n"
0 0 19 3 8 #"        "
0 0 22 3 2 #"(("
0 0 14 3 6 #"polar?"
0 0 19 3 1 #" "
0 0 14 3 1 #"z"
0 0 22 3 1 #")"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 15 #"imag-part-polar"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"contents"
0 0 19 3 1 #" "
0 0 14 3 1 #"z"
0 0 22 3 3 #")))"
0 0 19 29 1 #"\n"
0 0 19 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 4 #"else"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"error"
0 0 19 3 2 #" \""
0 0 19 3 7 #"Unknown"
0 0 19 3 1 #" "
0 0 19 3 4 #"type"
0 0 19 3 1 #" "
0 0 19 3 2 #"--"
0 0 19 3 10 #" IMAG-PART"
0 0 19 3 2 #"\" "
0 0 14 3 1 #"z"
0 0 22 3 4 #"))))"
0 0 19 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"gen-magnitude"
0 0 19 3 1 #" "
0 0 14 3 1 #"z"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 19 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 12 #"rectangular?"
0 0 19 3 1 #" "
0 0 14 3 1 #"z"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 21 #"magnitude-rectangular"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"contents"
0 0 19 3 1 #" "
0 0 14 3 1 #"z"
0 0 22 3 3 #")))"
0 0 19 29 1 #"\n"
0 0 19 3 8 #"        "
0 0 22 3 2 #"(("
0 0 14 3 6 #"polar?"
0 0 19 3 1 #" "
0 0 14 3 1 #"z"
0 0 22 3 1 #")"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 15 #"magnitude-polar"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"contents"
0 0 19 3 1 #" "
0 0 14 3 1 #"z"
0 0 22 3 3 #")))"
0 0 19 29 1 #"\n"
0 0 19 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 4 #"else"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"error"
0 0 19 3 2 #" \""
0 0 19 3 7 #"Unknown"
0 0 19 3 1 #" "
0 0 19 3 4 #"type"
0 0 19 3 1 #" "
0 0 19 3 2 #"--"
0 0 19 3 10 #" MAGNITUDE"
0 0 19 3 2 #"\" "
0 0 14 3 1 #"z"
0 0 22 3 4 #"))))"
0 0 19 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"gen-angle"
0 0 19 3 1 #" "
0 0 14 3 1 #"z"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 19 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 12 #"rectangular?"
0 0 19 3 1 #" "
0 0 14 3 1 #"z"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 17 #"angle-rectangular"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"contents"
0 0 19 3 1 #" "
0 0 14 3 1 #"z"
0 0 22 3 3 #")))"
0 0 19 29 1 #"\n"
0 0 19 3 8 #"        "
0 0 22 3 2 #"(("
0 0 14 3 6 #"polar?"
0 0 19 3 1 #" "
0 0 14 3 1 #"z"
0 0 22 3 1 #")"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 11 #"angle-polar"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"contents"
0 0 19 3 1 #" "
0 0 14 3 1 #"z"
0 0 22 3 3 #")))"
0 0 19 29 1 #"\n"
0 0 19 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 4 #"else"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"error"
0 0 19 3 2 #" \""
0 0 19 3 7 #"Unknown"
0 0 19 3 1 #" "
0 0 19 3 4 #"type"
0 0 19 3 1 #" "
0 0 19 3 2 #"--"
0 0 19 3 6 #" ANGLE"
0 0 19 3 2 #"\" "
0 0 14 3 1 #"z"
0 0 22 3 4 #"))))"
0 0 19 29 1 #"\n"
0 0 17 3 34 #";; This system has 2 weaknesses..."
0 0 19 29 1 #"\n"
0 0 17 3 75
(
 #";; 1. The generic interface procs must know explicitly about the in"
 #"dividual"
) 0 0 19 29 1 #"\n"
0 0 17 3 78
(
 #";;    representations. If we add a new type, we must add a new clau"
 #"se to each."
) 0 0 19 29 1 #"\n"
0 0 17 3 82
(
 #";; 2. We must guarantee that no two procs in the entire system have"
 #" the same name."
) 0 0 19 29 1 #"\n"
0 0 17 3 84
(
 #";; We can sum these weaknesses up by saying that the implementation"
 #" of generic procs"
) 0 0 19 29 1 #"\n"
0 0 17 3 17 #";; above is not \""
0 0 17 3 68
(
 #"additive\": when a new representation is added, the generic selec"
 #"tors"
) 0 0 19 29 1 #"\n"
0 0 17 3 81
(
 #";; must be modified and all the other representations need to be ch"
 #"ecked for name"
) 0 0 19 29 1 #"\n"
0 0 17 3 13 #";; conflicts."
0 0 19 29 1 #"\n"
0 0 17 3 65
#";; What if we had hundreds of representations and many selectors?"
0 0 19 29 1 #"\n"
0 0 17 3 32 #";; We must modularize further..."
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 17 3 43 #";;  ======================================="
0 0 19 29 1 #"\n"
0 0 17 3 43 #";;  DATA-DIRECTED PROGRAMMING & ADDITIVITY."
0 0 19 29 1 #"\n"
0 0 17 3 43 #";;  ======================================="
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 17 3 88
(
 #";; Notice that the procs above could be arranged in a table, with t"
 #"he selector/operation"
) 0 0 19 29 1 #"\n"
0 0 17 3 87
(
 #";; on one axis and the representation type on the other. The entrie"
 #"s in the table would"
) 0 0 19 29 1 #"\n"
0 0 17 3 87
(
 #";; be the representation-specific procedures. Data-driven programmi"
 #"ng works with such a"
) 0 0 19 29 1 #"\n"
0 0 17 3 87
(
 #";; table directly. The interface is implemented as a proc that look"
 #"s up the combination"
) 0 0 19 29 1 #"\n"
0 0 17 3 83
(
 #";; of operation X argument-type in the table to find a proc, then a"
 #"pplies it to the"
) 0 0 19 29 1 #"\n"
0 0 17 3 28 #";; contents of the argument."
0 0 19 29 1 #"\n"
0 0 17 3 71
(
 #";;-----------------------------------------------------------------"
 #"----"
) 0 0 19 29 1 #"\n"
0 0 17 3 68
(
 #";; quick-and-dirty list implementation of put and get using global "
 #"\""
) 0 0 17 3 3 #"db\""
0 0 19 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 14 3 2 #"db"
0 0 19 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 3 #"())"
0 0 19 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"put"
0 0 19 3 1 #" "
0 0 14 3 2 #"op"
0 0 19 3 1 #" "
0 0 14 3 4 #"type"
0 0 19 3 1 #" "
0 0 14 3 4 #"item"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 4 #"set!"
0 0 19 3 1 #" "
0 0 14 3 2 #"db"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 19 3 1 #" "
0 0 14 3 2 #"op"
0 0 19 3 1 #" "
0 0 14 3 4 #"type"
0 0 19 3 1 #" "
0 0 14 3 4 #"item"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 14 3 2 #"db"
0 0 22 3 3 #")))"
0 0 19 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"get"
0 0 19 3 1 #" "
0 0 14 3 2 #"op"
0 0 19 3 1 #" "
0 0 14 3 4 #"type"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"pred"
0 0 19 3 1 #" "
0 0 14 3 4 #"elem"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 3 #"and"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"equal?"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 19 3 1 #" "
0 0 14 3 4 #"elem"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 14 3 2 #"op"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 9 #"         "
0 0 22 3 1 #"("
0 0 14 3 6 #"equal?"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cadr"
0 0 19 3 1 #" "
0 0 14 3 4 #"elem"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 14 3 4 #"type"
0 0 22 3 3 #")))"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 19 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 7 #"matches"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"filter"
0 0 19 3 1 #" "
0 0 14 3 4 #"pred"
0 0 19 3 1 #" "
0 0 14 3 2 #"db"
0 0 22 3 3 #")))"
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"null?"
0 0 19 3 1 #" "
0 0 14 3 7 #"matches"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 5 #"error"
0 0 19 3 2 #" \""
0 0 19 3 2 #"No"
0 0 19 3 1 #" "
0 0 19 3 6 #"method"
0 0 19 3 1 #" "
0 0 19 3 5 #"found"
0 0 19 3 1 #" "
0 0 19 3 3 #"for"
0 0 19 3 1 #" "
0 0 19 3 4 #"type"
0 0 19 3 1 #" "
0 0 19 3 2 #"--"
0 0 19 3 4 #" GET"
0 0 19 3 2 #"\" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 19 3 1 #" "
0 0 14 3 2 #"op"
0 0 19 3 1 #" "
0 0 14 3 4 #"type"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 8 #"        "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 19 3 1 #" "
0 0 22 3 2 #"(("
0 0 15 3 5 #"match"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 19 3 1 #" "
0 0 14 3 7 #"matches"
0 0 22 3 3 #")))"
0 0 19 29 1 #"\n"
0 0 19 3 10 #"          "
0 0 22 3 1 #"("
0 0 14 3 5 #"caddr"
0 0 19 3 1 #" "
0 0 15 3 5 #"match"
0 0 22 3 5 #")))))"
0 0 19 29 1 #"\n"
0 0 17 3 72
(
 #";;-----------------------------------------------------------------"
 #"-----"
) 0 0 19 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 27 #"install-rectangular-package"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 17 3 17 #";; internal procs"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"real-part"
0 0 19 3 1 #" "
0 0 14 3 1 #"z"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 19 3 1 #" "
0 0 14 3 1 #"z"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"imag-part"
0 0 19 3 1 #" "
0 0 14 3 1 #"z"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 19 3 1 #" "
0 0 14 3 1 #"z"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 19 #"make-from-real-imag"
0 0 19 3 1 #" "
0 0 14 3 1 #"x"
0 0 19 3 1 #" "
0 0 14 3 1 #"y"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 19 3 1 #" "
0 0 14 3 1 #"x"
0 0 19 3 1 #" "
0 0 14 3 1 #"y"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"magnitude"
0 0 19 3 1 #" "
0 0 14 3 1 #"z"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"sqrt"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 19 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 6 #"square"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"real-part"
0 0 19 3 1 #" "
0 0 14 3 1 #"z"
0 0 22 3 2 #")}"
0 0 19 3 1 #" "
0 0 22 3 1 #"{"
0 0 14 3 6 #"square"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"imag-part"
0 0 19 3 1 #" "
0 0 14 3 1 #"z"
0 0 22 3 5 #")})))"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"angle"
0 0 19 3 1 #" "
0 0 14 3 1 #"z"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"atan"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"imag-part"
0 0 19 3 1 #" "
0 0 14 3 1 #"z"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"real-part"
0 0 19 3 1 #" "
0 0 14 3 1 #"z"
0 0 22 3 3 #")))"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 17 #"make-from-mag-ang"
0 0 19 3 1 #" "
0 0 14 3 1 #"r"
0 0 19 3 1 #" "
0 0 14 3 1 #"a"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 19 3 1 #" "
0 0 14 3 1 #"r"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"cos"
0 0 19 3 1 #" "
0 0 14 3 1 #"a"
0 0 22 3 2 #"))"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 19 3 1 #" "
0 0 14 3 1 #"r"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"sin"
0 0 19 3 1 #" "
0 0 14 3 1 #"a"
0 0 22 3 4 #"))))"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 17 3 38 #";; interface to the rest of the system"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"tag"
0 0 19 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"attach-tag"
0 0 19 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 11 #"rectangular"
0 0 19 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 3 #"put"
0 0 19 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 9 #"real-part"
0 0 19 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 11 #"rectangular"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 14 3 9 #"real-part"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 3 #"put"
0 0 19 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 9 #"imag-part"
0 0 19 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 11 #"rectangular"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 14 3 9 #"imag-part"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 3 #"put"
0 0 19 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 9 #"magnitude"
0 0 19 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 11 #"rectangular"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 14 3 9 #"magnitude"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 3 #"put"
0 0 19 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"angle"
0 0 19 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 11 #"rectangular"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 14 3 5 #"angle"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 3 #"put"
0 0 19 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 19 #"make-from-real-imag"
0 0 19 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 11 #"rectangular"
0 0 19 29 1 #"\n"
0 0 19 3 7 #"       "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"x"
0 0 19 3 1 #" "
0 0 14 3 1 #"y"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"tag"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 19 #"make-from-real-imag"
0 0 19 3 1 #" "
0 0 14 3 1 #"x"
0 0 19 3 1 #" "
0 0 14 3 1 #"y"
0 0 22 3 4 #"))))"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 3 #"put"
0 0 19 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 17 #"make-from-mag-ang"
0 0 19 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 11 #"rectangular"
0 0 19 29 1 #"\n"
0 0 19 3 7 #"       "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"r"
0 0 19 3 1 #" "
0 0 14 3 1 #"a"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"tag"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 17 #"make-from-mag-ang"
0 0 19 3 1 #" "
0 0 14 3 1 #"r"
0 0 19 3 1 #" "
0 0 14 3 1 #"a"
0 0 22 3 4 #"))))"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 20 3 1 #"'"
0 0 14 3 4 #"done"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 21 #"install-polar-package"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 17 3 17 #";; internal procs"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"magnitude"
0 0 19 3 1 #" "
0 0 14 3 1 #"z"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 19 3 1 #" "
0 0 14 3 1 #"z"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"angle"
0 0 19 3 1 #" "
0 0 14 3 1 #"z"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 19 3 1 #" "
0 0 14 3 1 #"z"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 17 #"make-from-mag-ang"
0 0 19 3 1 #" "
0 0 14 3 1 #"r"
0 0 19 3 1 #" "
0 0 14 3 1 #"a"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 19 3 1 #" "
0 0 14 3 1 #"r"
0 0 19 3 1 #" "
0 0 14 3 1 #"a"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"real-part"
0 0 19 3 1 #" "
0 0 14 3 1 #"z"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"magnitude"
0 0 19 3 1 #" "
0 0 14 3 1 #"z"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"cos"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"angle"
0 0 19 3 1 #" "
0 0 14 3 1 #"z"
0 0 22 3 4 #"))))"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"imag-part"
0 0 19 3 1 #" "
0 0 14 3 1 #"z"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"magnitude"
0 0 19 3 1 #" "
0 0 14 3 1 #"z"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"sin"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"angle"
0 0 19 3 1 #" "
0 0 14 3 1 #"z"
0 0 22 3 4 #"))))"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 19 #"make-from-real-imag"
0 0 19 3 1 #" "
0 0 14 3 1 #"x"
0 0 19 3 1 #" "
0 0 14 3 1 #"y"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"sqrt"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"square"
0 0 19 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"square"
0 0 19 3 1 #" "
0 0 14 3 1 #"y"
0 0 22 3 3 #")))"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"atan"
0 0 19 3 1 #" "
0 0 14 3 1 #"y"
0 0 19 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 3 #")))"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 17 3 38 #";; interface to the reat of the system"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"tag"
0 0 19 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"attach-tag"
0 0 19 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"polar"
0 0 19 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 3 #"put"
0 0 19 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 9 #"real-part"
0 0 19 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 5 #"polar"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 14 3 9 #"real-part"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 3 #"put"
0 0 19 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 9 #"imag-part"
0 0 19 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 5 #"polar"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 14 3 9 #"imag-part"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 3 #"put"
0 0 19 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 9 #"magnitude"
0 0 19 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 5 #"polar"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 14 3 9 #"magnitude"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 3 #"put"
0 0 19 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"angle"
0 0 19 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 5 #"polar"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 14 3 5 #"angle"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 3 #"put"
0 0 19 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 19 #"make-from-real-imag"
0 0 19 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"polar"
0 0 19 29 1 #"\n"
0 0 19 3 7 #"       "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"x"
0 0 19 3 1 #" "
0 0 14 3 1 #"y"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"tag"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 19 #"make-from-real-imag"
0 0 19 3 1 #" "
0 0 14 3 1 #"x"
0 0 19 3 1 #" "
0 0 14 3 1 #"y"
0 0 22 3 4 #"))))"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 3 #"put"
0 0 19 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 17 #"make-from-mag-ang"
0 0 19 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"polar"
0 0 19 29 1 #"\n"
0 0 19 3 7 #"       "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"r"
0 0 19 3 1 #" "
0 0 14 3 1 #"a"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"tag"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 17 #"make-from-mag-ang"
0 0 19 3 1 #" "
0 0 14 3 1 #"r"
0 0 19 3 1 #" "
0 0 14 3 1 #"a"
0 0 22 3 4 #"))))"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 20 3 1 #"'"
0 0 14 3 4 #"done"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 17 3 51 #";; The selectors access the table using a general \""
0 0 17 3 23 #"operation\" procedure..."
0 0 19 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"apply-generic"
0 0 19 3 1 #" "
0 0 14 3 2 #"op"
0 0 19 3 1 #" "
0 0 26 3 1 #"."
0 0 19 3 1 #" "
0 0 14 3 4 #"args"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 4 #"let*"
0 0 19 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 9 #"type-tags"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"map"
0 0 19 3 1 #" "
0 0 14 3 8 #"type-tag"
0 0 19 3 1 #" "
0 0 14 3 4 #"args"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 9 #"         "
0 0 22 3 1 #"("
0 0 14 3 4 #"proc"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"get"
0 0 19 3 1 #" "
0 0 14 3 2 #"op"
0 0 19 3 1 #" "
0 0 14 3 9 #"type-tags"
0 0 22 3 3 #")))"
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 19 3 1 #" "
0 0 14 3 4 #"proc"
0 0 19 29 1 #"\n"
0 0 19 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 5 #"apply"
0 0 19 3 1 #" "
0 0 14 3 4 #"proc"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"map"
0 0 19 3 1 #" "
0 0 14 3 8 #"contents"
0 0 19 3 1 #" "
0 0 14 3 4 #"args"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 5 #"error"
0 0 19 3 2 #" \""
0 0 19 3 2 #"No"
0 0 19 3 1 #" "
0 0 19 3 6 #"method"
0 0 19 3 1 #" "
0 0 19 3 3 #"for"
0 0 19 3 1 #" "
0 0 19 3 5 #"these"
0 0 19 3 1 #" "
0 0 19 3 5 #"types"
0 0 19 3 1 #" "
0 0 19 3 2 #"--"
0 0 19 3 1 #" "
0 0 19 3 5 #"APPLY"
0 0 19 3 8 #" GENERIC"
0 0 19 3 1 #"\""
0 0 19 29 1 #"\n"
0 0 19 3 15 #"               "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 19 3 1 #" "
0 0 14 3 2 #"op"
0 0 19 3 1 #" "
0 0 14 3 9 #"type-tags"
0 0 22 3 5 #")))))"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 17 3 45 #";; we can now define our generic selectors..."
0 0 19 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"real-part"
0 0 19 3 1 #" "
0 0 14 3 1 #"z"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"apply-generic"
0 0 19 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 9 #"real-part"
0 0 19 3 1 #" "
0 0 14 3 1 #"z"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"imag-part"
0 0 19 3 1 #" "
0 0 14 3 1 #"z"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"apply-generic"
0 0 19 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 9 #"imag-part"
0 0 19 3 1 #" "
0 0 14 3 1 #"z"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"magnitude"
0 0 19 3 1 #" "
0 0 14 3 1 #"z"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"apply-generic"
0 0 19 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 9 #"magnitude"
0 0 19 3 1 #" "
0 0 14 3 1 #"z"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"angle"
0 0 19 3 1 #" "
0 0 14 3 1 #"z"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"apply-generic"
0 0 19 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"angle"
0 0 19 3 1 #" "
0 0 14 3 1 #"z"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 17 3 44 #";; ...and, using get, define constructors..."
0 0 19 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 19 #"make-from-real-imag"
0 0 19 3 1 #" "
0 0 14 3 1 #"x"
0 0 19 3 1 #" "
0 0 14 3 1 #"y"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 2 #"(("
0 0 14 3 3 #"get"
0 0 19 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 19 #"make-from-real-imag"
0 0 19 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 11 #"rectangular"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 14 3 1 #"x"
0 0 19 3 1 #" "
0 0 14 3 1 #"y"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 17 #"make-from-mag-ang"
0 0 19 3 1 #" "
0 0 14 3 1 #"r"
0 0 19 3 1 #" "
0 0 14 3 1 #"a"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 2 #"(("
0 0 14 3 3 #"get"
0 0 19 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 17 #"make-from-mag-ang"
0 0 19 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"polar"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 14 3 1 #"r"
0 0 19 3 1 #" "
0 0 14 3 1 #"a"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 17 3 52 #";; [ex 2.73] data-directed symbolic differentiation."
0 0 19 29 1 #"\n"
0 0 17 3 66
#";; Recall our symbolic differentiation program. We can regard this"
0 0 19 29 1 #"\n"
0 0 17 3 58
#";; prog as performing a dispatch on the type of expr to be"
0 0 19 29 1 #"\n"
0 0 17 3 66
#";; differentiated. Here, the 'type tag' is the algebraic op symbol"
0 0 19 29 1 #"\n"
0 0 17 3 62
#";; (eg '+) and the operation being performed is deriv. We can "
0 0 19 29 1 #"\n"
0 0 17 3 43 #";; transform it into data-directed style by"
0 0 19 29 1 #"\n"
0 0 17 3 44 #";; rewriting the basic derivative proc as..."
0 0 19 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"deriv"
0 0 19 3 1 #" "
0 0 14 3 3 #"exp"
0 0 19 3 1 #" "
0 0 14 3 3 #"var"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 19 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 7 #"number?"
0 0 19 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 8 #"        "
0 0 22 3 2 #"(("
0 0 14 3 9 #"variable?"
0 0 19 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"same-variable?"
0 0 19 3 1 #" "
0 0 14 3 3 #"exp"
0 0 19 3 1 #" "
0 0 14 3 3 #"var"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 20 3 1 #"1"
0 0 19 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 4 #"else"
0 0 19 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 3 #"get"
0 0 19 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"deriv"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"operator"
0 0 19 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #"))"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"operands"
0 0 19 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 14 3 3 #"var"
0 0 22 3 4 #"))))"
0 0 19 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"variable?"
0 0 19 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"symbol?"
0 0 19 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"same-variable?"
0 0 19 3 1 #" "
0 0 14 3 2 #"v1"
0 0 19 3 1 #" "
0 0 14 3 2 #"v2"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 3 #"and"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"variable?"
0 0 19 3 1 #" "
0 0 14 3 2 #"v1"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"variable?"
0 0 19 3 1 #" "
0 0 14 3 2 #"v2"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"eq?"
0 0 19 3 1 #" "
0 0 14 3 2 #"v1"
0 0 19 3 1 #" "
0 0 14 3 2 #"v2"
0 0 22 3 3 #")))"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"operator"
0 0 19 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 19 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"operands"
0 0 19 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 19 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 17 3 98
(
 #";;[ex 2.73a] We extract the operator and look up the deriv pr"
 #"oc for that type of expression in the"
) 0 0 19 29 1 #"\n"
0 0 17 3 98
(
 #";; global table. We cannot assimilate the predicates since they sho"
 #"uld work (and return false) for"
) 0 0 19 29 1 #"\n"
0 0 17 3 102
(
 #";; unknown expression types. Also, there would be nothing to be gai"
 #"ned by doing so: it would only make"
) 0 0 19 29 1 #"\n"
0 0 17 3 32 #";; the code less understandable."
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 17 3 70
(
 #";;[ex 2.73b] dum and product deriv procs + auxillary installa"
 #"tion code"
) 0 0 19 29 1 #"\n"
0 0 17 3 46 #";; TO-DO: refine procedure to simplify results"
0 0 19 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"make-sum"
0 0 19 3 1 #" "
0 0 14 3 2 #"a1"
0 0 19 3 1 #" "
0 0 14 3 2 #"a2"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 19 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 3 #"and"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"number?"
0 0 19 3 1 #" "
0 0 14 3 2 #"a1"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"number?"
0 0 19 3 1 #" "
0 0 14 3 2 #"a2"
0 0 22 3 2 #"))"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 19 3 1 #" "
0 0 14 3 2 #"a1"
0 0 19 3 1 #" "
0 0 14 3 2 #"a2"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 8 #"        "
0 0 22 3 2 #"(("
0 0 14 3 4 #"eqv?"
0 0 19 3 1 #" "
0 0 20 3 1 #"0"
0 0 19 3 1 #" "
0 0 14 3 2 #"a1"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 14 3 2 #"a2"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 8 #"        "
0 0 22 3 2 #"(("
0 0 14 3 4 #"eqv?"
0 0 19 3 1 #" "
0 0 20 3 1 #"0"
0 0 19 3 1 #" "
0 0 14 3 2 #"a2"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 14 3 2 #"a1"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 4 #"else"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 19 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"+"
0 0 19 3 1 #" "
0 0 14 3 2 #"a1"
0 0 19 3 1 #" "
0 0 14 3 2 #"a2"
0 0 22 3 4 #"))))"
0 0 19 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"make-product"
0 0 19 3 1 #" "
0 0 14 3 2 #"m1"
0 0 19 3 1 #" "
0 0 14 3 2 #"m2"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 19 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 3 #"and"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"number?"
0 0 19 3 1 #" "
0 0 14 3 2 #"m1"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"number?"
0 0 19 3 1 #" "
0 0 14 3 2 #"m2"
0 0 22 3 2 #"))"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 19 3 1 #" "
0 0 14 3 2 #"m1"
0 0 19 3 1 #" "
0 0 14 3 2 #"m2"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 8 #"        "
0 0 22 3 2 #"(("
0 0 14 3 4 #"eqv?"
0 0 19 3 1 #" "
0 0 20 3 1 #"1"
0 0 19 3 1 #" "
0 0 14 3 2 #"m1"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 14 3 2 #"m2"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 8 #"        "
0 0 22 3 2 #"(("
0 0 14 3 4 #"eqv?"
0 0 19 3 1 #" "
0 0 20 3 1 #"1"
0 0 19 3 1 #" "
0 0 14 3 2 #"m2"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 14 3 2 #"m1"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 8 #"        "
0 0 22 3 2 #"(("
0 0 14 3 2 #"or"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"eqv?"
0 0 19 3 1 #" "
0 0 20 3 1 #"0"
0 0 19 3 1 #" "
0 0 14 3 2 #"m1"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"eqv?"
0 0 19 3 1 #" "
0 0 20 3 1 #"0"
0 0 19 3 1 #" "
0 0 14 3 2 #"m2"
0 0 22 3 2 #"))"
0 0 19 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 4 #"else"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 19 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"*"
0 0 19 3 1 #" "
0 0 14 3 2 #"m1"
0 0 19 3 1 #" "
0 0 14 3 2 #"m2"
0 0 22 3 4 #"))))"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 17 #"install-sum-deriv"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 17 3 17 #";; internal defns"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"addend"
0 0 19 3 1 #" "
0 0 14 3 4 #"args"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 19 3 1 #" "
0 0 14 3 4 #"args"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"augend"
0 0 19 3 1 #" "
0 0 14 3 4 #"args"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 19 3 1 #" "
0 0 14 3 4 #"args"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"sum-deriv"
0 0 19 3 1 #" "
0 0 14 3 4 #"args"
0 0 19 3 1 #" "
0 0 14 3 3 #"var"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 19 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 5 #"null?"
0 0 19 3 1 #" "
0 0 14 3 4 #"args"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 10 #"          "
0 0 22 3 2 #"(("
0 0 14 3 5 #"null?"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 19 3 1 #" "
0 0 14 3 4 #"args"
0 0 22 3 2 #"))"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"deriv"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 19 3 1 #" "
0 0 14 3 4 #"args"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 14 3 3 #"var"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 10 #"          "
0 0 22 3 1 #"("
0 0 14 3 4 #"else"
0 0 19 29 1 #"\n"
0 0 19 3 11 #"           "
0 0 22 3 1 #"("
0 0 14 3 8 #"make-sum"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"deriv"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"addend"
0 0 19 3 1 #" "
0 0 14 3 4 #"args"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 14 3 3 #"var"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 21 #"                     "
0 0 22 3 1 #"("
0 0 14 3 5 #"deriv"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 19 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"+"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"augend"
0 0 19 3 1 #" "
0 0 14 3 4 #"args"
0 0 22 3 2 #"))"
0 0 19 3 1 #" "
0 0 14 3 3 #"var"
0 0 22 3 5 #")))))"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 17 3 12 #";; interface"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 3 #"put"
0 0 19 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"deriv"
0 0 19 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"+"
0 0 19 3 1 #" "
0 0 14 3 9 #"sum-deriv"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 20 3 1 #"'"
0 0 14 3 4 #"done"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 21 #"install-product-deriv"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 17 3 17 #";; internal defns"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"multiplier"
0 0 19 3 1 #" "
0 0 14 3 4 #"args"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 19 3 1 #" "
0 0 14 3 4 #"args"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"multiplicand"
0 0 19 3 1 #" "
0 0 14 3 4 #"args"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 19 3 1 #" "
0 0 14 3 4 #"args"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"product-deriv"
0 0 19 3 1 #" "
0 0 14 3 4 #"args"
0 0 19 3 1 #" "
0 0 14 3 3 #"var"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 19 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 5 #"null?"
0 0 19 3 1 #" "
0 0 14 3 4 #"args"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 10 #"          "
0 0 22 3 2 #"(("
0 0 14 3 5 #"null?"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 19 3 1 #" "
0 0 14 3 4 #"args"
0 0 22 3 2 #"))"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"deriv"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 19 3 1 #" "
0 0 14 3 4 #"args"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 14 3 3 #"var"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 10 #"          "
0 0 22 3 1 #"("
0 0 14 3 4 #"else"
0 0 19 29 1 #"\n"
0 0 19 3 11 #"           "
0 0 22 3 1 #"("
0 0 14 3 8 #"make-sum"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"make-product"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"multiplier"
0 0 19 3 1 #" "
0 0 14 3 4 #"args"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 35 #"                                   "
0 0 22 3 1 #"("
0 0 14 3 5 #"deriv"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 19 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"*"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"multiplicand"
0 0 19 3 1 #" "
0 0 14 3 4 #"args"
0 0 22 3 2 #"))"
0 0 19 3 1 #" "
0 0 14 3 3 #"var"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 21 #"                     "
0 0 22 3 1 #"("
0 0 14 3 12 #"make-product"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"deriv"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"multiplier"
0 0 19 3 1 #" "
0 0 14 3 4 #"args"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 14 3 3 #"var"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 35 #"                                   "
0 0 22 3 1 #"("
0 0 14 3 12 #"multiplicand"
0 0 19 3 1 #" "
0 0 14 3 4 #"args"
0 0 22 3 6 #"))))))"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 17 3 12 #";; interface"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 3 #"put"
0 0 19 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"deriv"
0 0 19 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"*"
0 0 19 3 1 #" "
0 0 14 3 13 #"product-deriv"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 20 3 1 #"'"
0 0 14 3 4 #"done"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 17 3 28 #";; [ex 2.73c] exponentiation"
0 0 19 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"make-expt"
0 0 19 3 1 #" "
0 0 14 3 1 #"b"
0 0 19 3 1 #" "
0 0 14 3 1 #"e"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 19 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 3 #"and"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"number?"
0 0 19 3 1 #" "
0 0 14 3 1 #"b"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"number?"
0 0 19 3 1 #" "
0 0 14 3 1 #"e"
0 0 22 3 2 #"))"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"expt"
0 0 19 3 1 #" "
0 0 14 3 1 #"b"
0 0 19 3 1 #" "
0 0 14 3 1 #"e"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 8 #"        "
0 0 22 3 2 #"(("
0 0 14 3 4 #"eqv?"
0 0 19 3 1 #" "
0 0 20 3 1 #"1"
0 0 19 3 1 #" "
0 0 14 3 1 #"b"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 8 #"        "
0 0 22 3 2 #"(("
0 0 14 3 4 #"eqv?"
0 0 19 3 1 #" "
0 0 20 3 1 #"1"
0 0 19 3 1 #" "
0 0 14 3 1 #"e"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 14 3 1 #"b"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 4 #"else"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"list"
0 0 19 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 2 #"**"
0 0 19 3 1 #" "
0 0 14 3 1 #"b"
0 0 19 3 1 #" "
0 0 14 3 1 #"e"
0 0 22 3 4 #"))))"
0 0 19 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 18 #"install-expt-deriv"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 17 3 17 #";; internal defns"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"base"
0 0 19 3 1 #" "
0 0 14 3 4 #"args"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 19 3 1 #" "
0 0 14 3 4 #"args"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"expt"
0 0 19 3 1 #" "
0 0 14 3 4 #"args"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 19 3 1 #" "
0 0 14 3 4 #"args"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"expt-deriv"
0 0 19 3 1 #" "
0 0 14 3 4 #"args"
0 0 19 3 1 #" "
0 0 14 3 3 #"var"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 12 #"make-product"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"make-product"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"expt"
0 0 19 3 1 #" "
0 0 14 3 4 #"args"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 32 #"                                "
0 0 22 3 1 #"("
0 0 14 3 9 #"make-expt"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"base"
0 0 19 3 1 #" "
0 0 14 3 4 #"args"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"make-sum"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"expt"
0 0 19 3 1 #" "
0 0 14 3 4 #"args"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 20 3 2 #"-1"
0 0 22 3 3 #")))"
0 0 19 29 1 #"\n"
0 0 19 3 18 #"                  "
0 0 22 3 1 #"("
0 0 14 3 5 #"deriv"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"base"
0 0 19 3 1 #" "
0 0 14 3 4 #"args"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 14 3 3 #"var"
0 0 22 3 3 #")))"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 17 3 12 #";; interface"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 3 #"put"
0 0 19 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"deriv"
0 0 19 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 2 #"**"
0 0 19 3 1 #" "
0 0 14 3 10 #"expt-deriv"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 20 3 1 #"'"
0 0 14 3 4 #"done"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 17 3 27 #";; [ex 2.74] **** TODO ****"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 17 3 19 #";; ================"
0 0 19 29 1 #"\n"
0 0 17 3 19 #";; MESSAGE PASSING."
0 0 19 29 1 #"\n"
0 0 17 3 19 #";; ================"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 17 3 101
(
 #";; Data-directed programming handles generic ops by dealing explict"
 #"ly with type-and-operation tables."
) 0 0 19 29 1 #"\n"
0 0 17 3 108
(
 #";; The style of programming we used above handled this by making ea"
 #"ch op resonsible for its own dispatching."
) 0 0 19 29 1 #"\n"
0 0 17 3 99
(
 #";; In effect, this decomposes the op-type table into rows, with eac"
 #"h row representing a generic op."
) 0 0 19 29 1 #"\n"
0 0 17 3 106
(
 #";; An alternative implementation strategy is to decompose into colu"
 #"mns, and instead of having \"intelligent"
) 0 0 4 29 1 #"\n"
0 0 17 3 107
(
 #";; operations\" dispatching on data type, to work with \"intell"
 #"igent data objects\" that dispatch on operation"
) 0 0 4 29 1 #"\n"
0 0 17 11 107
(
 #";; names. We can do this by making a data object, such as a rectang"
 #"ular number, represented by a procedure "
) 0 0 17 3 4 #"that"
0 0 4 29 1 #"\n"
0 0 17 3 83
(
 #";; takes as input the required operation name and performs the oper"
 #"ation indicated."
) 0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 60
#";; In such a scheme, make-from-real-imag could be defined..."
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 22 #"make-from-real-imag-mp"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 14 3 1 #"y"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"dispatch"
0 0 4 3 1 #" "
0 0 14 3 2 #"op"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 3 #"eq?"
0 0 4 3 1 #" "
0 0 14 3 2 #"op"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 9 #"real-part"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 22 3 2 #"(("
0 0 14 3 3 #"eq?"
0 0 4 3 1 #" "
0 0 14 3 2 #"op"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 9 #"imag-part"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 1 #"y"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 22 3 2 #"(("
0 0 14 3 3 #"eq?"
0 0 4 3 1 #" "
0 0 14 3 2 #"op"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 9 #"magnitude"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"sqrt"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"square"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"square"
0 0 4 3 1 #" "
0 0 14 3 1 #"y"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 22 3 2 #"(("
0 0 14 3 3 #"eq?"
0 0 4 3 1 #" "
0 0 14 3 2 #"op"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"angle"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"atan"
0 0 4 3 1 #" "
0 0 14 3 1 #"y"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 22 3 1 #"("
0 0 14 3 4 #"else"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"error"
0 0 4 3 1 #" "
0 0 19 3 45 #"\"Unknown operation -- MAKE-FROM-REAL-IMAG-MP\""
0 0 4 3 1 #" "
0 0 14 3 2 #"op"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 14 3 8 #"dispatch"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 17 3 96
(
 #";; the corresponding apply-generic procedure would just feed the op"
 #"'s name to the data object..."
) 0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"apply-generic-mp"
0 0 4 3 1 #" "
0 0 14 3 2 #"op"
0 0 4 3 1 #" "
0 0 14 3 3 #"arg"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"arg"
0 0 4 3 1 #" "
0 0 14 3 2 #"op"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 17 3 13 #";; example..."
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"real-part-mp"
0 0 4 3 1 #" "
0 0 14 3 1 #"z"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"z"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 9 #"real-part"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 54 #";; [ex 7.5] make-from-mag-ang in message-passing style"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 20 #"make-from-mag-ang-mp"
0 0 4 3 1 #" "
0 0 14 3 1 #"r"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"dispatch"
0 0 4 3 1 #" "
0 0 14 3 2 #"op"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 3 #"eq?"
0 0 4 3 1 #" "
0 0 14 3 2 #"op"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 9 #"real-part"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 4 3 1 #" "
0 0 14 3 1 #"r"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"cos"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 22 3 2 #"(("
0 0 14 3 3 #"eq?"
0 0 4 3 1 #" "
0 0 14 3 2 #"op"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 9 #"imag-part"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 4 3 1 #" "
0 0 14 3 1 #"r"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"sin"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 22 3 2 #"(("
0 0 14 3 3 #"eq?"
0 0 4 3 1 #" "
0 0 14 3 2 #"op"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 9 #"magnitude"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 1 #"r"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 22 3 2 #"(("
0 0 14 3 3 #"eq?"
0 0 4 3 1 #" "
0 0 14 3 2 #"op"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 5 #"angle"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 22 3 1 #"("
0 0 14 3 4 #"else"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"error"
0 0 4 3 1 #" "
0 0 19 3 43 #"\"Unknown operation -- MAKE-FROM-MAG-ANG-MP\""
0 0 4 3 1 #" "
0 0 14 3 2 #"op"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 14 3 8 #"dispatch"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 66
(
 #";; [ex 7.6] comparison of strategies for multiple representat"
 #"ions."
) 0 0 4 29 1 #"\n"
0 0 17 3 88
(
 #";; adding new types to message-passing-style: we simply write the c"
 #"ode for the new type."
) 0 0 4 29 1 #"\n"
0 0 17 3 101
(
 #";; adding new functions to message-passing style: we must add code "
 #"for the new function to every type"
) 0 0 4 29 1 #"\n"
0 0 17 3 100
(
 #";;     (of course, we could always add a clause to all types to che"
 #"ck a database for functions which"
) 0 0 4 29 1 #"\n"
0 0 17 3 102
(
 #";;      aren't explicitly coded into it. In that case, we could sim"
 #"ply register type-specific versions"
) 0 0 4 29 1 #"\n"
0 0 17 3 48 #";;      of the function for each existing type)."
0 0 4 29 1 #"\n"
0 0 17 3 101
(
 #";; adding new types to data-directed style: we simply add a new pac"
 #"kage, registering the type and its"
) 0 0 4 29 1 #"\n"
0 0 17 3 55 #";;     versions of generic functions with the global db"
0 0 4 29 1 #"\n"
0 0 17 3 102
(
 #";; adding new functions to data-directed style: we can add a new ge"
 #"neric function in a package just as"
) 0 0 4 29 1 #"\n"
0 0 17 3 39 #";;     easily as we can for a new type."
0 0 4 29 1 #"\n"
0 0 17 3 96
(
 #";; adding new types to explicit dispatch style: we must add addtion"
 #"al cases to the bodies of all"
) 0 0 4 29 1 #"\n"
0 0 17 3 25 #";;     generic functions,"
0 0 4 29 1 #"\n"
0 0 17 3 96
(
 #";; adding new functios to explicit dispatch style: we can add new g"
 #"eneric functions at any time."
) 0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 20 #"install-show-package"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"show-rect"
0 0 4 3 1 #" "
0 0 14 3 1 #"z"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 19 3 28 #"\"rectangular complex number\""
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"show-polar"
0 0 4 3 1 #" "
0 0 14 3 1 #"z"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 19 3 22 #"\"polar complex number\""
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 11 #"; interface"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 3 #"put"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"show"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 11 #"rectangular"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 9 #"show-rect"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 3 #"put"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"show"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 5 #"polar"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 10 #"show-polar"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 20 3 1 #"'"
0 0 14 3 4 #"done"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 17 3 100
(
 #";; Summary: if new types must be added, we should use message-passi"
 #"ng or data-directed style. If new"
) 0 0 4 29 1 #"\n"
0 0 17 3 84
(
 #";; functions must be added, we should use data-directed style or  e"
 #"xplicit dispatch."
) 0 0 4 29 1 #"\n"
0 0 17 3 83
(
 #";; (example of installing a package for a new function, working for"
 #" multiple types."
) 0 0 4 29 1 #"\n"
0 00000000000
